---
title: "Model Evaluation"
editor: visual
output:
  html_document:
    toc: FALSE
---

### Library

```{r}
library(tidymodels)
library(here)
library(rsample)
library(parsnip) #building a model specification
library(yardstick)
library(dplyr)
```

### Loading the data

```{r}
location = here("Fluanalysis_exercise", "data", "cleandata", "cleandata.RDS")
clean_data = readRDS(location)
```

## Data Splitting

### We can use the rsample package to create an object that contains the information on how to split the data

```{r}
# Fix the random numbers by setting the seed 
# This enables the analysis to be reproducible when random numbers are used 
set.seed(222)

# Put 3/4 of the data into the training set 
data_split = initial_split(clean_data, prop = 3/4)
```

### Create data frames for the two sets

```{r}
train_data = training(data_split)
test_data  = testing(data_split)
```

## Creating a simple recipe that fits a logistic model to our categorical outcome of interest(Nausea), using all predictors.

### Initiating a new recipe

```{r}
flu_rec <- 
  recipe(Nausea ~ ., data = train_data) # . indicates all predictors are present

```

### Set a model

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

### Using the workflow() function to create a simple workflow that fits a logistic model to all predictors using the glm engine

```{r}
flu_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(flu_rec)
flu_wflow
```

### A single function that can be used to prepare the recipe and train the model from the resulting predictors

```{r}
# fitting the model to the training data
flu_fit1 <- 
  flu_wflow %>% 
  fit(data = train_data)

# fitting the model to the test data 
flu_fit2 <- 
  flu_wflow %>% 
  fit(data = test_data)

```

### Extracting the model or recipe objects from the workflow in order to view model coefficients

```{r}
# Extracting coefficients for model fit to the training data
flu_fit1 %>% 
  extract_fit_parsnip() %>% 
  tidy() #tidy() function used to get a tidy tibble of the model coefficients 

#Extracting the coefficients for the model fit to the test data 
flu_fit2 %>% 
  extract_fit_parsnip() %>% 
  tidy() 
```

### Using augment() to predict the and save the predicted data with the dataset

```{r}
flu_aug1 = augment(flu_fit1, train_data)

flu_aug2 = augment(flu_fit2, test_data)

flu_aug1
flu_aug2
```

### Creating an ROC curve and producing estimates under the curve for the training data for predicted class probability of No

```{r}
flu_aug1 %>% 
  roc_curve(truth = Nausea, .pred_No)  %>% 
  autoplot

flu_aug1 %>% 
  roc_auc(truth = Nausea, .pred_No)
```

### Creating an ROC curve and producing estimates under the curve for the test data for predicted class probability of No

```{r}
flu_aug2 %>% 
  roc_curve(truth = Nausea, .pred_No)  %>% 
  autoplot

flu_aug2 %>% 
  roc_auc(truth = Nausea, .pred_No)
```

# Alternate Model

### Setting up the recipe for a model between main predictor and categorical outcome

```{r}
flu2_rec <- 
  recipe(Nausea ~ RunnyNose, data = train_data) # . indicates all predictors are present
```

### Set a model

```{r}
lr_mod2 <- 
  logistic_reg() %>% 
  set_engine("glm")
```

### Using the workflow() function to create a simple workflow that fits a logistic model to all predictors using the glm engine

```{r}
flu_wflow2 <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(flu_rec)
flu_wflow2
```

### A single function that can be used to prepare the recipe and train the model from the resulting predictors

```{r}
# fitting the model to the training data
flu_fit3 <- 
  flu_wflow %>% 
  fit(data = train_data)

# fitting the model to the test data 
flu_fit4 <- 
  flu_wflow %>% 
  fit(data = test_data)

```

### Extracting the model or recipe objects from the workflow in order to view model coefficients

```{r}
# Extracting coefficients for model fit to the training data
flu_fit3 %>% 
  extract_fit_parsnip() %>% 
  tidy() #tidy() function used to get a tidy tibble of the model coefficients 

#Extracting the coefficients for the model fit to the test data 
flu_fit4 %>% 
  extract_fit_parsnip() %>% 
  tidy() 
```

### Using augment() to predict the and save the predicted data with the dataset

```{r}
flu_aug3 = augment(flu_fit3, train_data)

flu_aug4 = augment(flu_fit4, test_data)

flu_aug3
flu_aug4
```

### Creating an ROC curve and producing estimates under the curve for the training data

```{r}
flu_aug3 %>% 
  roc_curve(truth = Nausea, .pred_No)  %>% 
  autoplot

flu_aug3 %>% 
  roc_auc(truth = Nausea, .pred_No)
```

### Creating an ROC curve and producing estimates under the curve for the test data

```{r}
flu_aug4 %>% 
  roc_curve(truth = Nausea, .pred_No)  %>% 
  autoplot

flu_aug4 %>% 
  roc_auc(truth = Nausea, .pred_No)
```
